[package]
name = "paratest-runtime"
version = "0.6.0"
authors.workspace = true
description = "A new Cumulus FRAME-based Substrate Runtime, ready for hacking together a parachain."
license = "Unlicense"
homepage.workspace = true
repository.workspace = true
edition.workspace = true

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[build-dependencies]
substrate-wasm-builder = { workspace = true, optional = true }

[dependencies]
codec = { workspace = true, default-features = false, features = ["derive"] }
hex-literal = { version = "0.4.1", optional = true }
log = { version = "0.4.20", default-features = false }
scale-info = { workspace = true, features = ["derive"] }
smallvec = "1.11.0"

# Local
pallet-parachain-template = { path = "../pallets/template", default-features = false }

# Substrate
frame-benchmarking = { workspace = true, optional = true }
frame-executive = { workspace = true }
frame-support = { workspace = true }
frame-system = { workspace = true }
frame-system-benchmarking = { workspace = true, optional = true }
frame-system-rpc-runtime-api = { workspace = true }
frame-try-runtime = { workspace = true, optional = true }
pallet-aura = { workspace = true }
pallet-authorship = { workspace = true }
pallet-balances = { workspace = true }
pallet-message-queue = { workspace = true }
pallet-session = { workspace = true }
pallet-sudo = { workspace = true }
pallet-timestamp = { workspace = true }
pallet-transaction-payment = { workspace = true }
pallet-transaction-payment-rpc-runtime-api = { workspace = true }
sp-api = { workspace = true }
sp-block-builder = { workspace = true }
sp-consensus-aura = { workspace = true }
sp-core = { workspace = true }
sp-genesis-builder = { workspace = true }
sp-inherents = { workspace = true }
sp-offchain = { workspace = true }
sp-runtime = { workspace = true }
sp-session = { workspace = true }
sp-std = { workspace = true }
sp-transaction-pool = { workspace = true }
sp-version = { workspace = true }

# Polkadot
polkadot-parachain-primitives = { workspace = true }
polkadot-runtime-common = { workspace = true }

# XCM
pallet-xcm = { workspace = true }
xcm-builder = { workspace = true }
xcm-executor = { workspace = true }
xcm = { workspace = true }

# Cumulus
cumulus-pallet-aura-ext = { workspace = true }
cumulus-pallet-dmp-queue = { workspace = true }
cumulus-pallet-parachain-system = { workspace = true, features = [
  "parameterized-consensus-hook",
] }
cumulus-pallet-session-benchmarking = { workspace = true }
cumulus-pallet-xcm = { workspace = true }
cumulus-pallet-xcmp-queue = { workspace = true }
cumulus-primitives-core = { workspace = true }
cumulus-primitives-utility = { workspace = true }
pallet-collator-selection = { workspace = true }
parachains-common = { workspace = true }
parachain-info = { workspace = true }
cumulus-primitives-aura = { workspace = true }

[features]
default = ["std"]
std = [
  "codec/std",
  "cumulus-pallet-aura-ext/std",
  "cumulus-pallet-dmp-queue/std",
  "cumulus-pallet-parachain-system/std",
  "cumulus-pallet-session-benchmarking/std",
  "cumulus-primitives-aura/std",
  "cumulus-pallet-xcm/std",
  "cumulus-pallet-xcmp-queue/std",
  "cumulus-primitives-core/std",
  "cumulus-primitives-utility/std",
  "frame-benchmarking?/std",
  "frame-executive/std",
  "frame-support/std",
  "frame-system-benchmarking?/std",
  "frame-system-rpc-runtime-api/std",
  "frame-system/std",
  "frame-try-runtime?/std",
  "log/std",
  "pallet-aura/std",
  "pallet-authorship/std",
  "pallet-balances/std",
  "pallet-collator-selection/std",
  "pallet-message-queue/std",
  "pallet-parachain-template/std",
  "pallet-session/std",
  "pallet-sudo/std",
  "pallet-timestamp/std",
  "pallet-transaction-payment-rpc-runtime-api/std",
  "pallet-transaction-payment/std",
  "pallet-xcm/std",
  "parachain-info/std",
  "parachains-common/std",
  "polkadot-parachain-primitives/std",
  "polkadot-runtime-common/std",
  "scale-info/std",
  "sp-api/std",
  "sp-block-builder/std",
  "sp-consensus-aura/std",
  "sp-core/std",
  "sp-genesis-builder/std",
  "sp-inherents/std",
  "sp-offchain/std",
  "sp-runtime/std",
  "sp-session/std",
  "sp-std/std",
  "sp-transaction-pool/std",
  "sp-version/std",
  "substrate-wasm-builder",
  "xcm-builder/std",
  "xcm-executor/std",
  "xcm/std",
]

runtime-benchmarks = [
  "cumulus-pallet-dmp-queue/runtime-benchmarks",
  "cumulus-pallet-parachain-system/runtime-benchmarks",
  "cumulus-pallet-session-benchmarking/runtime-benchmarks",
  "cumulus-pallet-xcmp-queue/runtime-benchmarks",
  "cumulus-primitives-core/runtime-benchmarks",
  "cumulus-primitives-utility/runtime-benchmarks",
  "frame-benchmarking/runtime-benchmarks",
  "frame-support/runtime-benchmarks",
  "frame-system-benchmarking/runtime-benchmarks",
  "frame-system/runtime-benchmarks",
  "hex-literal",
  "pallet-balances/runtime-benchmarks",
  "pallet-collator-selection/runtime-benchmarks",
  "pallet-message-queue/runtime-benchmarks",
  "pallet-parachain-template/runtime-benchmarks",
  "pallet-sudo/runtime-benchmarks",
  "pallet-timestamp/runtime-benchmarks",
  "pallet-xcm/runtime-benchmarks",
  "parachains-common/runtime-benchmarks",
  "polkadot-parachain-primitives/runtime-benchmarks",
  "polkadot-runtime-common/runtime-benchmarks",
  "sp-runtime/runtime-benchmarks",
  "xcm-builder/runtime-benchmarks",
  "xcm-executor/runtime-benchmarks",
]

try-runtime = [
  "cumulus-pallet-aura-ext/try-runtime",
  "cumulus-pallet-dmp-queue/try-runtime",
  "cumulus-pallet-parachain-system/try-runtime",
  "cumulus-pallet-xcm/try-runtime",
  "cumulus-pallet-xcmp-queue/try-runtime",
  "frame-executive/try-runtime",
  "frame-support/try-runtime",
  "frame-system/try-runtime",
  "frame-try-runtime/try-runtime",
  "pallet-aura/try-runtime",
  "pallet-authorship/try-runtime",
  "pallet-balances/try-runtime",
  "pallet-collator-selection/try-runtime",
  "pallet-parachain-template/try-runtime",
  "pallet-session/try-runtime",
  "pallet-sudo/try-runtime",
  "pallet-timestamp/try-runtime",
  "pallet-transaction-payment/try-runtime",
  "parachain-info/try-runtime",
  "polkadot-runtime-common/try-runtime",
  "sp-runtime/try-runtime",
  "pallet-xcm/try-runtime",
  "pallet-message-queue/try-runtime",
]

experimental = ["pallet-aura/experimental"]
