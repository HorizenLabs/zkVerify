// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Generic executions of the operations for *Arkworks* elliptic curves.

// As not all functions are used by each elliptic curve and some elliptic
// curve may be excluded by the build we resort to `#[allow(unused)]` to
// suppress the expected warning.

//! Autogenerated weights for `pallet_ark`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-25, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `behemoth`, CPU: `AMD Ryzen Threadripper 3970X 32-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/node-ark
// benchmark
// pallet
// --chain=dev
// --pallet=pallet_ark
// --extrinsic=*
// --steps=50
// --repeat=20
// --no-storage-info
// --template=frame-weight-template.hbs
// --json-file=./results/results.json
// --output=./results/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_accbncrypto`.
pub trait WeightInfo {
	fn bn254_pairing_opt() -> Weight;
	fn bn254_msm_g1_opt(x: u32, ) -> Weight;
	fn bn254_msm_g2_opt(x: u32, ) -> Weight;
	fn bn254_mul_projective_g1_opt(x: u32, ) -> Weight;
	fn bn254_mul_affine_g1_opt(x: u32, ) -> Weight;
	fn bn254_mul_projective_g2_opt(x: u32, ) -> Weight;
	fn bn254_mul_affine_g2_opt(x: u32, ) -> Weight;
}

/// Weights for `pallet_ark` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn bn254_pairing_opt() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_258_839_000 picoseconds.
		Weight::from_parts(2_300_880_000, 0)
	}
	/// The range of component `x` is `[10, 100]`.
	fn bn254_msm_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_755_367_000 picoseconds.
		Weight::from_parts(794_175_956, 0)
			// Standard Error: 273_761
			.saturating_add(Weight::from_parts(328_340_605, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn bn254_msm_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_187_327_000 picoseconds.
		Weight::from_parts(3_129_272_052, 0)
			// Standard Error: 1_771_770
			.saturating_add(Weight::from_parts(863_433_688, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bn254_mul_projective_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 54_314_000 picoseconds.
		Weight::from_parts(636_071, 0)
			// Standard Error: 21_730
			.saturating_add(Weight::from_parts(49_960_688, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bn254_mul_affine_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 333_409_000 picoseconds.
		Weight::from_parts(289_445_860, 0)
			// Standard Error: 17_482
			.saturating_add(Weight::from_parts(50_178_950, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bn254_mul_projective_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 151_951_000 picoseconds.
		Weight::from_parts(9_593_875, 0)
			// Standard Error: 18_812
			.saturating_add(Weight::from_parts(143_499_150, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bn254_mul_affine_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 908_822_000 picoseconds.
		Weight::from_parts(771_227_691, 0)
			// Standard Error: 23_399
			.saturating_add(Weight::from_parts(143_868_204, 0).saturating_mul(x.into()))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	fn bn254_pairing_opt() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_258_839_000 picoseconds.
		Weight::from_parts(2_300_880_000, 0)
	}
	/// The range of component `x` is `[10, 100]`.
	fn bn254_msm_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_755_367_000 picoseconds.
		Weight::from_parts(794_175_956, 0)
			// Standard Error: 273_761
			.saturating_add(Weight::from_parts(328_340_605, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn bn254_msm_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_187_327_000 picoseconds.
		Weight::from_parts(3_129_272_052, 0)
			// Standard Error: 1_771_770
			.saturating_add(Weight::from_parts(863_433_688, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bn254_mul_projective_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 54_314_000 picoseconds.
		Weight::from_parts(636_071, 0)
			// Standard Error: 21_730
			.saturating_add(Weight::from_parts(49_960_688, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bn254_mul_affine_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 333_409_000 picoseconds.
		Weight::from_parts(289_445_860, 0)
			// Standard Error: 17_482
			.saturating_add(Weight::from_parts(50_178_950, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bn254_mul_projective_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 151_951_000 picoseconds.
		Weight::from_parts(9_593_875, 0)
			// Standard Error: 18_812
			.saturating_add(Weight::from_parts(143_499_150, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bn254_mul_affine_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 908_822_000 picoseconds.
		Weight::from_parts(771_227_691, 0)
			// Standard Error: 23_399
			.saturating_add(Weight::from_parts(143_868_204, 0).saturating_mul(x.into()))
	}
}