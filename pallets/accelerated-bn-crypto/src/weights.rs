
//! Autogenerated weights for `pallet_ark`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-25, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `behemoth`, CPU: `AMD Ryzen Threadripper 3970X 32-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/node-ark
// benchmark
// pallet
// --chain=dev
// --pallet=pallet_ark
// --extrinsic=*
// --steps=50
// --repeat=20
// --no-storage-info
// --template=frame-weight-template.hbs
// --json-file=./results/results.json
// --output=./results/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_ark`.
pub trait WeightInfo {
	fn bls12_381_groth16_verification() -> Weight;
	fn bls12_381_groth16_verification_opt() -> Weight;
	fn bls12_381_pairing() -> Weight;
	fn bls12_381_pairing_opt() -> Weight;
	fn bls12_381_msm_g1(x: u32, ) -> Weight;
	fn bls12_381_msm_g1_opt(x: u32, ) -> Weight;
	fn bls12_381_msm_g2(x: u32, ) -> Weight;
	fn bls12_381_msm_g2_opt(x: u32, ) -> Weight;
	fn bls12_381_mul_projective_g1(x: u32, ) -> Weight;
	fn bls12_381_mul_projective_g1_opt(x: u32, ) -> Weight;
	fn bls12_381_mul_affine_g1(x: u32, ) -> Weight;
	fn bls12_381_mul_affine_g1_opt(x: u32, ) -> Weight;
	fn bls12_381_mul_projective_g2(x: u32, ) -> Weight;
	fn bls12_381_mul_projective_g2_opt(x: u32, ) -> Weight;
	fn bls12_381_mul_affine_g2(x: u32, ) -> Weight;
	fn bls12_381_mul_affine_g2_opt(x: u32, ) -> Weight;
	fn bls12_377_pairing() -> Weight;
	fn bls12_377_pairing_opt() -> Weight;
	fn bls12_377_msm_g1(x: u32, ) -> Weight;
	fn bls12_377_msm_g1_opt(x: u32, ) -> Weight;
	fn bls12_377_msm_g2(x: u32, ) -> Weight;
	fn bls12_377_msm_g2_opt(x: u32, ) -> Weight;
	fn bls12_377_mul_projective_g1(x: u32, ) -> Weight;
	fn bls12_377_mul_projective_g1_opt(x: u32, ) -> Weight;
	fn bls12_377_mul_affine_g1(x: u32, ) -> Weight;
	fn bls12_377_mul_affine_g1_opt(x: u32, ) -> Weight;
	fn bls12_377_mul_projective_g2(x: u32, ) -> Weight;
	fn bls12_377_mul_projective_g2_opt(x: u32, ) -> Weight;
	fn bls12_377_mul_affine_g2(x: u32, ) -> Weight;
	fn bls12_377_mul_affine_g2_opt(x: u32, ) -> Weight;
	fn bw6_761_pairing() -> Weight;
	fn bw6_761_pairing_opt() -> Weight;
	fn bw6_761_msm_g1(x: u32, ) -> Weight;
	fn bw6_761_msm_g1_opt(x: u32, ) -> Weight;
	fn bw6_761_msm_g2(x: u32, ) -> Weight;
	fn bw6_761_msm_g2_opt(x: u32, ) -> Weight;
	fn bw6_761_mul_projective_g1(x: u32, ) -> Weight;
	fn bw6_761_mul_projective_g1_opt(x: u32, ) -> Weight;
	fn bw6_761_mul_affine_g1(x: u32, ) -> Weight;
	fn bw6_761_mul_affine_g1_opt(x: u32, ) -> Weight;
	fn bw6_761_mul_projective_g2(x: u32, ) -> Weight;
	fn bw6_761_mul_projective_g2_opt(x: u32, ) -> Weight;
	fn bw6_761_mul_affine_g2(x: u32, ) -> Weight;
	fn bw6_761_mul_affine_g2_opt(x: u32, ) -> Weight;
	fn ed_on_bls12_381_bandersnatch_msm_sw(x: u32, ) -> Weight;
	fn ed_on_bls12_381_bandersnatch_msm_sw_opt(x: u32, ) -> Weight;
	fn ed_on_bls12_381_bandersnatch_msm_te(x: u32, ) -> Weight;
	fn ed_on_bls12_381_bandersnatch_msm_te_opt(x: u32, ) -> Weight;
	fn ed_on_bls12_381_bandersnatch_mul_projective_sw(x: u32, ) -> Weight;
	fn ed_on_bls12_381_bandersnatch_mul_projective_sw_opt(x: u32, ) -> Weight;
	fn ed_on_bls12_381_bandersnatch_mul_affine_sw(x: u32, ) -> Weight;
	fn ed_on_bls12_381_bandersnatch_mul_affine_sw_opt(x: u32, ) -> Weight;
	fn ed_on_bls12_381_bandersnatch_mul_projective_te(x: u32, ) -> Weight;
	fn ed_on_bls12_381_bandersnatch_mul_projective_te_opt(x: u32, ) -> Weight;
	fn ed_on_bls12_381_bandersnatch_mul_affine_te(x: u32, ) -> Weight;
	fn ed_on_bls12_381_bandersnatch_mul_affine_te_opt(x: u32, ) -> Weight;
	fn ed_on_bls12_377_msm(x: u32, ) -> Weight;
	fn ed_on_bls12_377_msm_opt(x: u32, ) -> Weight;
	fn ed_on_bls12_377_mul_projective(x: u32, ) -> Weight;
	fn ed_on_bls12_377_mul_projective_opt(x: u32, ) -> Weight;
	fn ed_on_bls12_377_mul_affine(x: u32, ) -> Weight;
	fn ed_on_bls12_377_mul_affine_opt(x: u32, ) -> Weight;
}

/// Weights for `pallet_ark` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn bls12_381_groth16_verification() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 19_682_761_000 picoseconds.
		Weight::from_parts(19_754_809_000, 0)
	}
	fn bls12_381_groth16_verification_opt() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_312_358_000 picoseconds.
		Weight::from_parts(3_333_439_000, 0)
	}
	fn bls12_381_pairing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_159_043_000 picoseconds.
		Weight::from_parts(9_197_937_000, 0)
	}
	fn bls12_381_pairing_opt() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_258_839_000 picoseconds.
		Weight::from_parts(2_300_880_000, 0)
	}
	/// The range of component `x` is `[10, 100]`.
	fn bls12_381_msm_g1(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_005_989_000 picoseconds.
		Weight::from_parts(5_604_534_604, 0)
			// Standard Error: 2_136_262
			.saturating_add(Weight::from_parts(866_639_812, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn bls12_381_msm_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_755_367_000 picoseconds.
		Weight::from_parts(794_175_956, 0)
			// Standard Error: 273_761
			.saturating_add(Weight::from_parts(328_340_605, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn bls12_381_msm_g2(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 30_023_087_000 picoseconds.
		Weight::from_parts(16_237_389_309, 0)
			// Standard Error: 6_104_550
			.saturating_add(Weight::from_parts(2_021_734_784, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn bls12_381_msm_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_187_327_000 picoseconds.
		Weight::from_parts(3_129_272_052, 0)
			// Standard Error: 1_771_770
			.saturating_add(Weight::from_parts(863_433_688, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_381_mul_projective_g1(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 349_540_000 picoseconds.
		Weight::from_parts(351_122_000, 0)
			// Standard Error: 836_124
			.saturating_add(Weight::from_parts(320_279_011, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_381_mul_projective_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 54_314_000 picoseconds.
		Weight::from_parts(636_071, 0)
			// Standard Error: 21_730
			.saturating_add(Weight::from_parts(49_960_688, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_381_mul_affine_g1(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 884_655_000 picoseconds.
		Weight::from_parts(594_903_747, 0)
			// Standard Error: 63_992
			.saturating_add(Weight::from_parts(297_680_145, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_381_mul_affine_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 333_409_000 picoseconds.
		Weight::from_parts(289_445_860, 0)
			// Standard Error: 17_482
			.saturating_add(Weight::from_parts(50_178_950, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_381_mul_projective_g2(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_025_015_000 picoseconds.
		Weight::from_parts(1_027_880_000, 0)
			// Standard Error: 2_503_950
			.saturating_add(Weight::from_parts(952_149_244, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_381_mul_projective_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 151_951_000 picoseconds.
		Weight::from_parts(9_593_875, 0)
			// Standard Error: 18_812
			.saturating_add(Weight::from_parts(143_499_150, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_381_mul_affine_g2(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_055_981_000 picoseconds.
		Weight::from_parts(1_192_029_933, 0)
			// Standard Error: 113_153
			.saturating_add(Weight::from_parts(877_130_639, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_381_mul_affine_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 908_822_000 picoseconds.
		Weight::from_parts(771_227_691, 0)
			// Standard Error: 23_399
			.saturating_add(Weight::from_parts(143_868_204, 0).saturating_mul(x.into()))
	}
	fn bls12_377_pairing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_835_339_000 picoseconds.
		Weight::from_parts(12_866_690_000, 0)
	}
	fn bls12_377_pairing_opt() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_282_802_000 picoseconds.
		Weight::from_parts(3_296_789_000, 0)
	}
	/// The range of component `x` is `[10, 100]`.
	fn bls12_377_msm_g1(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 19_170_081_000 picoseconds.
		Weight::from_parts(5_441_609_549, 0)
			// Standard Error: 2_068_380
			.saturating_add(Weight::from_parts(1_592_476_480, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn bls12_377_msm_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_836_797_000 picoseconds.
		Weight::from_parts(759_314_296, 0)
			// Standard Error: 308_825
			.saturating_add(Weight::from_parts(543_839_367, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn bls12_377_msm_g2(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 57_829_201_000 picoseconds.
		Weight::from_parts(15_754_194_439, 0)
			// Standard Error: 8_895_826
			.saturating_add(Weight::from_parts(4_920_324_247, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn bls12_377_msm_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 17_550_797_000 picoseconds.
		Weight::from_parts(2_633_431_326, 0)
			// Standard Error: 1_231_306
			.saturating_add(Weight::from_parts(1_602_936_622, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_377_mul_projective_g1(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 359_870_000 picoseconds.
		Weight::from_parts(1_437_697, 0)
			// Standard Error: 42_954
			.saturating_add(Weight::from_parts(365_993_246, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_377_mul_projective_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 56_679_000 picoseconds.
		Weight::from_parts(1_577_746, 0)
			// Standard Error: 20_043
			.saturating_add(Weight::from_parts(51_927_188, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_377_mul_affine_g1(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_688_225_000 picoseconds.
		Weight::from_parts(1_393_628_175, 0)
			// Standard Error: 55_173
			.saturating_add(Weight::from_parts(306_068_350, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_377_mul_affine_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 571_205_000 picoseconds.
		Weight::from_parts(530_706_138, 0)
			// Standard Error: 27_569
			.saturating_add(Weight::from_parts(51_531_549, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_377_mul_projective_g2(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_108_404_000 picoseconds.
		Weight::from_parts(1_114_716_000, 0)
			// Standard Error: 2_677_121
			.saturating_add(Weight::from_parts(1_029_386_910, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_377_mul_projective_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 185_836_000 picoseconds.
		Weight::from_parts(9_114_954, 0)
			// Standard Error: 24_872
			.saturating_add(Weight::from_parts(177_713_236, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_377_mul_affine_g2(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_036_521_000 picoseconds.
		Weight::from_parts(4_100_236_253, 0)
			// Standard Error: 98_306
			.saturating_add(Weight::from_parts(951_452_874, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_377_mul_affine_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_650_332_000 picoseconds.
		Weight::from_parts(1_496_324_491, 0)
			// Standard Error: 47_201
			.saturating_add(Weight::from_parts(177_061_192, 0).saturating_mul(x.into()))
	}
	fn bw6_761_pairing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 56_868_221_000 picoseconds.
		Weight::from_parts(56_964_304_000, 0)
	}
	fn bw6_761_pairing_opt() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_008_649_000 picoseconds.
		Weight::from_parts(10_052_422_000, 0)
	}
	/// The range of component `x` is `[10, 100]`.
	fn bw6_761_msm_g1(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 117_155_415_000 picoseconds.
		Weight::from_parts(34_392_797_770, 0)
			// Standard Error: 14_005_174
			.saturating_add(Weight::from_parts(9_661_156_269, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn bw6_761_msm_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 28_966_311_000 picoseconds.
		Weight::from_parts(3_838_111_597, 0)
			// Standard Error: 1_491_112
			.saturating_add(Weight::from_parts(2_667_070_674, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn bw6_761_msm_g2(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 117_343_716_000 picoseconds.
		Weight::from_parts(34_926_855_945, 0)
			// Standard Error: 14_080_251
			.saturating_add(Weight::from_parts(9_652_457_188, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn bw6_761_msm_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 28_948_514_000 picoseconds.
		Weight::from_parts(2_414_698_483, 0)
			// Standard Error: 1_578_221
			.saturating_add(Weight::from_parts(2_682_669_799, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bw6_761_mul_projective_g1(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_465_438_000 picoseconds.
		Weight::from_parts(1_501_828_000, 0)
			// Standard Error: 3_592_415
			.saturating_add(Weight::from_parts(1_380_842_818, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bw6_761_mul_projective_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 189_674_000 picoseconds.
		Weight::from_parts(18_587_887, 0)
			// Standard Error: 25_028
			.saturating_add(Weight::from_parts(171_493_450, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bw6_761_mul_affine_g1(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_335_521_000 picoseconds.
		Weight::from_parts(8_113_888_338, 0)
			// Standard Error: 147_758
			.saturating_add(Weight::from_parts(1_262_692_160, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bw6_761_mul_affine_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_667_090_000 picoseconds.
		Weight::from_parts(2_515_172_355, 0)
			// Standard Error: 39_504
			.saturating_add(Weight::from_parts(171_314_970, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bw6_761_mul_projective_g2(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_489_795_000 picoseconds.
		Weight::from_parts(1_501_386_000, 0)
			// Standard Error: 3_599_035
			.saturating_add(Weight::from_parts(1_380_054_270, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bw6_761_mul_projective_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 189_874_000 picoseconds.
		Weight::from_parts(18_709_975, 0)
			// Standard Error: 19_953
			.saturating_add(Weight::from_parts(171_588_561, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bw6_761_mul_affine_g2(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_049_652_000 picoseconds.
		Weight::from_parts(8_127_163_101, 0)
			// Standard Error: 103_443
			.saturating_add(Weight::from_parts(1_261_213_438, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bw6_761_mul_affine_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_664_046_000 picoseconds.
		Weight::from_parts(2_514_491_229, 0)
			// Standard Error: 34_988
			.saturating_add(Weight::from_parts(171_607_660, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn ed_on_bls12_381_bandersnatch_msm_sw(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_563_695_000 picoseconds.
		Weight::from_parts(2_751_561_210, 0)
			// Standard Error: 1_017_069
			.saturating_add(Weight::from_parts(880_022_987, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn ed_on_bls12_381_bandersnatch_msm_sw_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_829_241_000 picoseconds.
		Weight::from_parts(480_441_726, 0)
			// Standard Error: 172_846
			.saturating_add(Weight::from_parts(250_632_855, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn ed_on_bls12_381_bandersnatch_msm_te(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_502_467_000 picoseconds.
		Weight::from_parts(4_339_851_811, 0)
			// Standard Error: 2_738_167
			.saturating_add(Weight::from_parts(788_130_529, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn ed_on_bls12_381_bandersnatch_msm_te_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_558_683_000 picoseconds.
		Weight::from_parts(582_130_178, 0)
			// Standard Error: 435_074
			.saturating_add(Weight::from_parts(220_099_623, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_381_bandersnatch_mul_projective_sw(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 194_784_000 picoseconds.
		Weight::from_parts(195_985_000, 0)
			// Standard Error: 464_230
			.saturating_add(Weight::from_parts(178_245_935, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_381_bandersnatch_mul_projective_sw_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 35_448_000 picoseconds.
		Weight::from_parts(35_678_000, 0)
			// Standard Error: 101_160
			.saturating_add(Weight::from_parts(30_510_142, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_381_bandersnatch_mul_affine_sw(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 922_047_000 picoseconds.
		Weight::from_parts(760_102_767, 0)
			// Standard Error: 24_323
			.saturating_add(Weight::from_parts(171_395_424, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_381_bandersnatch_mul_affine_sw_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 253_536_000 picoseconds.
		Weight::from_parts(223_095_871, 0)
			// Standard Error: 18_394
			.saturating_add(Weight::from_parts(34_669_345, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_381_bandersnatch_mul_projective_te(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 140_259_000 picoseconds.
		Weight::from_parts(2_812_237, 0)
			// Standard Error: 34_081
			.saturating_add(Weight::from_parts(137_337_889, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_381_bandersnatch_mul_projective_te_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 27_743_000 picoseconds.
		Weight::from_parts(27_973_000, 0)
			// Standard Error: 70_353
			.saturating_add(Weight::from_parts(20_351_420, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_381_bandersnatch_mul_affine_te(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 754_987_000 picoseconds.
		Weight::from_parts(621_915_501, 0)
			// Standard Error: 23_240
			.saturating_add(Weight::from_parts(137_209_014, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_381_bandersnatch_mul_affine_te_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 199_954_000 picoseconds.
		Weight::from_parts(178_101_877, 0)
			// Standard Error: 13_863
			.saturating_add(Weight::from_parts(23_602_718, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn ed_on_bls12_377_msm(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_881_333_000 picoseconds.
		Weight::from_parts(4_261_242_075, 0)
			// Standard Error: 2_611_936
			.saturating_add(Weight::from_parts(818_623_474, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn ed_on_bls12_377_msm_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_803_493_000 picoseconds.
		Weight::from_parts(533_109_840, 0)
			// Standard Error: 301_102
			.saturating_add(Weight::from_parts(239_771_053, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_377_mul_projective(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 139_497_000 picoseconds.
		Weight::from_parts(4_585_552, 0)
			// Standard Error: 27_238
			.saturating_add(Weight::from_parts(135_976_435, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_377_mul_projective_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 26_260_000 picoseconds.
		Weight::from_parts(3_454_508, 0)
			// Standard Error: 15_667
			.saturating_add(Weight::from_parts(20_548_438, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_377_mul_affine(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 830_601_000 picoseconds.
		Weight::from_parts(698_624_421, 0)
			// Standard Error: 25_189
			.saturating_add(Weight::from_parts(136_807_974, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_377_mul_affine_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 263_505_000 picoseconds.
		Weight::from_parts(245_101_729, 0)
			// Standard Error: 14_804
			.saturating_add(Weight::from_parts(20_935_826, 0).saturating_mul(x.into()))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	fn bls12_381_groth16_verification() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 19_682_761_000 picoseconds.
		Weight::from_parts(19_754_809_000, 0)
	}
	fn bls12_381_groth16_verification_opt() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_312_358_000 picoseconds.
		Weight::from_parts(3_333_439_000, 0)
	}
	fn bls12_381_pairing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_159_043_000 picoseconds.
		Weight::from_parts(9_197_937_000, 0)
	}
	fn bls12_381_pairing_opt() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_258_839_000 picoseconds.
		Weight::from_parts(2_300_880_000, 0)
	}
	/// The range of component `x` is `[10, 100]`.
	fn bls12_381_msm_g1(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_005_989_000 picoseconds.
		Weight::from_parts(5_604_534_604, 0)
			// Standard Error: 2_136_262
			.saturating_add(Weight::from_parts(866_639_812, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn bls12_381_msm_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_755_367_000 picoseconds.
		Weight::from_parts(794_175_956, 0)
			// Standard Error: 273_761
			.saturating_add(Weight::from_parts(328_340_605, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn bls12_381_msm_g2(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 30_023_087_000 picoseconds.
		Weight::from_parts(16_237_389_309, 0)
			// Standard Error: 6_104_550
			.saturating_add(Weight::from_parts(2_021_734_784, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn bls12_381_msm_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_187_327_000 picoseconds.
		Weight::from_parts(3_129_272_052, 0)
			// Standard Error: 1_771_770
			.saturating_add(Weight::from_parts(863_433_688, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_381_mul_projective_g1(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 349_540_000 picoseconds.
		Weight::from_parts(351_122_000, 0)
			// Standard Error: 836_124
			.saturating_add(Weight::from_parts(320_279_011, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_381_mul_projective_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 54_314_000 picoseconds.
		Weight::from_parts(636_071, 0)
			// Standard Error: 21_730
			.saturating_add(Weight::from_parts(49_960_688, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_381_mul_affine_g1(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 884_655_000 picoseconds.
		Weight::from_parts(594_903_747, 0)
			// Standard Error: 63_992
			.saturating_add(Weight::from_parts(297_680_145, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_381_mul_affine_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 333_409_000 picoseconds.
		Weight::from_parts(289_445_860, 0)
			// Standard Error: 17_482
			.saturating_add(Weight::from_parts(50_178_950, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_381_mul_projective_g2(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_025_015_000 picoseconds.
		Weight::from_parts(1_027_880_000, 0)
			// Standard Error: 2_503_950
			.saturating_add(Weight::from_parts(952_149_244, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_381_mul_projective_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 151_951_000 picoseconds.
		Weight::from_parts(9_593_875, 0)
			// Standard Error: 18_812
			.saturating_add(Weight::from_parts(143_499_150, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_381_mul_affine_g2(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_055_981_000 picoseconds.
		Weight::from_parts(1_192_029_933, 0)
			// Standard Error: 113_153
			.saturating_add(Weight::from_parts(877_130_639, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_381_mul_affine_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 908_822_000 picoseconds.
		Weight::from_parts(771_227_691, 0)
			// Standard Error: 23_399
			.saturating_add(Weight::from_parts(143_868_204, 0).saturating_mul(x.into()))
	}
	fn bls12_377_pairing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_835_339_000 picoseconds.
		Weight::from_parts(12_866_690_000, 0)
	}
	fn bls12_377_pairing_opt() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_282_802_000 picoseconds.
		Weight::from_parts(3_296_789_000, 0)
	}
	/// The range of component `x` is `[10, 100]`.
	fn bls12_377_msm_g1(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 19_170_081_000 picoseconds.
		Weight::from_parts(5_441_609_549, 0)
			// Standard Error: 2_068_380
			.saturating_add(Weight::from_parts(1_592_476_480, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn bls12_377_msm_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_836_797_000 picoseconds.
		Weight::from_parts(759_314_296, 0)
			// Standard Error: 308_825
			.saturating_add(Weight::from_parts(543_839_367, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn bls12_377_msm_g2(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 57_829_201_000 picoseconds.
		Weight::from_parts(15_754_194_439, 0)
			// Standard Error: 8_895_826
			.saturating_add(Weight::from_parts(4_920_324_247, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn bls12_377_msm_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 17_550_797_000 picoseconds.
		Weight::from_parts(2_633_431_326, 0)
			// Standard Error: 1_231_306
			.saturating_add(Weight::from_parts(1_602_936_622, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_377_mul_projective_g1(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 359_870_000 picoseconds.
		Weight::from_parts(1_437_697, 0)
			// Standard Error: 42_954
			.saturating_add(Weight::from_parts(365_993_246, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_377_mul_projective_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 56_679_000 picoseconds.
		Weight::from_parts(1_577_746, 0)
			// Standard Error: 20_043
			.saturating_add(Weight::from_parts(51_927_188, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_377_mul_affine_g1(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_688_225_000 picoseconds.
		Weight::from_parts(1_393_628_175, 0)
			// Standard Error: 55_173
			.saturating_add(Weight::from_parts(306_068_350, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_377_mul_affine_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 571_205_000 picoseconds.
		Weight::from_parts(530_706_138, 0)
			// Standard Error: 27_569
			.saturating_add(Weight::from_parts(51_531_549, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_377_mul_projective_g2(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_108_404_000 picoseconds.
		Weight::from_parts(1_114_716_000, 0)
			// Standard Error: 2_677_121
			.saturating_add(Weight::from_parts(1_029_386_910, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_377_mul_projective_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 185_836_000 picoseconds.
		Weight::from_parts(9_114_954, 0)
			// Standard Error: 24_872
			.saturating_add(Weight::from_parts(177_713_236, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_377_mul_affine_g2(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_036_521_000 picoseconds.
		Weight::from_parts(4_100_236_253, 0)
			// Standard Error: 98_306
			.saturating_add(Weight::from_parts(951_452_874, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bls12_377_mul_affine_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_650_332_000 picoseconds.
		Weight::from_parts(1_496_324_491, 0)
			// Standard Error: 47_201
			.saturating_add(Weight::from_parts(177_061_192, 0).saturating_mul(x.into()))
	}
	fn bw6_761_pairing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 56_868_221_000 picoseconds.
		Weight::from_parts(56_964_304_000, 0)
	}
	fn bw6_761_pairing_opt() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_008_649_000 picoseconds.
		Weight::from_parts(10_052_422_000, 0)
	}
	/// The range of component `x` is `[10, 100]`.
	fn bw6_761_msm_g1(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 117_155_415_000 picoseconds.
		Weight::from_parts(34_392_797_770, 0)
			// Standard Error: 14_005_174
			.saturating_add(Weight::from_parts(9_661_156_269, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn bw6_761_msm_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 28_966_311_000 picoseconds.
		Weight::from_parts(3_838_111_597, 0)
			// Standard Error: 1_491_112
			.saturating_add(Weight::from_parts(2_667_070_674, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn bw6_761_msm_g2(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 117_343_716_000 picoseconds.
		Weight::from_parts(34_926_855_945, 0)
			// Standard Error: 14_080_251
			.saturating_add(Weight::from_parts(9_652_457_188, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn bw6_761_msm_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 28_948_514_000 picoseconds.
		Weight::from_parts(2_414_698_483, 0)
			// Standard Error: 1_578_221
			.saturating_add(Weight::from_parts(2_682_669_799, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bw6_761_mul_projective_g1(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_465_438_000 picoseconds.
		Weight::from_parts(1_501_828_000, 0)
			// Standard Error: 3_592_415
			.saturating_add(Weight::from_parts(1_380_842_818, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bw6_761_mul_projective_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 189_674_000 picoseconds.
		Weight::from_parts(18_587_887, 0)
			// Standard Error: 25_028
			.saturating_add(Weight::from_parts(171_493_450, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bw6_761_mul_affine_g1(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_335_521_000 picoseconds.
		Weight::from_parts(8_113_888_338, 0)
			// Standard Error: 147_758
			.saturating_add(Weight::from_parts(1_262_692_160, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bw6_761_mul_affine_g1_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_667_090_000 picoseconds.
		Weight::from_parts(2_515_172_355, 0)
			// Standard Error: 39_504
			.saturating_add(Weight::from_parts(171_314_970, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bw6_761_mul_projective_g2(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_489_795_000 picoseconds.
		Weight::from_parts(1_501_386_000, 0)
			// Standard Error: 3_599_035
			.saturating_add(Weight::from_parts(1_380_054_270, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bw6_761_mul_projective_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 189_874_000 picoseconds.
		Weight::from_parts(18_709_975, 0)
			// Standard Error: 19_953
			.saturating_add(Weight::from_parts(171_588_561, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bw6_761_mul_affine_g2(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_049_652_000 picoseconds.
		Weight::from_parts(8_127_163_101, 0)
			// Standard Error: 103_443
			.saturating_add(Weight::from_parts(1_261_213_438, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn bw6_761_mul_affine_g2_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_664_046_000 picoseconds.
		Weight::from_parts(2_514_491_229, 0)
			// Standard Error: 34_988
			.saturating_add(Weight::from_parts(171_607_660, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn ed_on_bls12_381_bandersnatch_msm_sw(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_563_695_000 picoseconds.
		Weight::from_parts(2_751_561_210, 0)
			// Standard Error: 1_017_069
			.saturating_add(Weight::from_parts(880_022_987, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn ed_on_bls12_381_bandersnatch_msm_sw_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_829_241_000 picoseconds.
		Weight::from_parts(480_441_726, 0)
			// Standard Error: 172_846
			.saturating_add(Weight::from_parts(250_632_855, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn ed_on_bls12_381_bandersnatch_msm_te(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_502_467_000 picoseconds.
		Weight::from_parts(4_339_851_811, 0)
			// Standard Error: 2_738_167
			.saturating_add(Weight::from_parts(788_130_529, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn ed_on_bls12_381_bandersnatch_msm_te_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_558_683_000 picoseconds.
		Weight::from_parts(582_130_178, 0)
			// Standard Error: 435_074
			.saturating_add(Weight::from_parts(220_099_623, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_381_bandersnatch_mul_projective_sw(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 194_784_000 picoseconds.
		Weight::from_parts(195_985_000, 0)
			// Standard Error: 464_230
			.saturating_add(Weight::from_parts(178_245_935, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_381_bandersnatch_mul_projective_sw_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 35_448_000 picoseconds.
		Weight::from_parts(35_678_000, 0)
			// Standard Error: 101_160
			.saturating_add(Weight::from_parts(30_510_142, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_381_bandersnatch_mul_affine_sw(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 922_047_000 picoseconds.
		Weight::from_parts(760_102_767, 0)
			// Standard Error: 24_323
			.saturating_add(Weight::from_parts(171_395_424, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_381_bandersnatch_mul_affine_sw_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 253_536_000 picoseconds.
		Weight::from_parts(223_095_871, 0)
			// Standard Error: 18_394
			.saturating_add(Weight::from_parts(34_669_345, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_381_bandersnatch_mul_projective_te(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 140_259_000 picoseconds.
		Weight::from_parts(2_812_237, 0)
			// Standard Error: 34_081
			.saturating_add(Weight::from_parts(137_337_889, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_381_bandersnatch_mul_projective_te_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 27_743_000 picoseconds.
		Weight::from_parts(27_973_000, 0)
			// Standard Error: 70_353
			.saturating_add(Weight::from_parts(20_351_420, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_381_bandersnatch_mul_affine_te(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 754_987_000 picoseconds.
		Weight::from_parts(621_915_501, 0)
			// Standard Error: 23_240
			.saturating_add(Weight::from_parts(137_209_014, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_381_bandersnatch_mul_affine_te_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 199_954_000 picoseconds.
		Weight::from_parts(178_101_877, 0)
			// Standard Error: 13_863
			.saturating_add(Weight::from_parts(23_602_718, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn ed_on_bls12_377_msm(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_881_333_000 picoseconds.
		Weight::from_parts(4_261_242_075, 0)
			// Standard Error: 2_611_936
			.saturating_add(Weight::from_parts(818_623_474, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[10, 100]`.
	fn ed_on_bls12_377_msm_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_803_493_000 picoseconds.
		Weight::from_parts(533_109_840, 0)
			// Standard Error: 301_102
			.saturating_add(Weight::from_parts(239_771_053, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_377_mul_projective(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 139_497_000 picoseconds.
		Weight::from_parts(4_585_552, 0)
			// Standard Error: 27_238
			.saturating_add(Weight::from_parts(135_976_435, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_377_mul_projective_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 26_260_000 picoseconds.
		Weight::from_parts(3_454_508, 0)
			// Standard Error: 15_667
			.saturating_add(Weight::from_parts(20_548_438, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_377_mul_affine(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 830_601_000 picoseconds.
		Weight::from_parts(698_624_421, 0)
			// Standard Error: 25_189
			.saturating_add(Weight::from_parts(136_807_974, 0).saturating_mul(x.into()))
	}
	/// The range of component `x` is `[1, 16]`.
	fn ed_on_bls12_377_mul_affine_opt(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 263_505_000 picoseconds.
		Weight::from_parts(245_101_729, 0)
			// Standard Error: 14_804
			.saturating_add(Weight::from_parts(20_935_826, 0).saturating_mul(x.into()))
	}
}