// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `xcm::pallet_xcm_benchmarks_generic`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 36.0.0
//! DATE: 2024-10-14, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `drhorizen`, CPU: `11th Gen Intel(R) Core(TM) i7-11850H @ 2.50GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// /home/daniele/horizen/git/zkVerify/target/release/zkv-relay
// benchmark
// pallet
// --chain
// dev
// --pallet
// xcm::pallet-xcm-benchmarks-generic
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /home/daniele/horizen/git/zkVerify/HEADER-APACHE2
// --output
// /home/daniele/horizen/git/zkVerify/runtime/src/weights/xcm/pallet_xcm_benchmarks_generic.rs
// --template
// /home/daniele/horizen/git/zkVerify/node/zkv-deploy-weight-template-xcm.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `xcm::pallet_xcm_benchmarks_generic` using the zkVerify node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo<T> {
    /// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
    /// Proof: `Dmp::DeliveryFeeFactor` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `XcmPallet::SupportedVersion` (r:1 w:0)
    /// Proof: `XcmPallet::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Dmp::DownwardMessageQueues` (r:1 w:1)
    /// Proof: `Dmp::DownwardMessageQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `Dmp::DownwardMessageQueueHeads` (r:1 w:1)
    /// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn report_holding() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `245`
        //  Estimated: `6196`
        // Minimum execution time: 72_310_000 picoseconds.
        Weight::from_parts(74_060_000, 6196)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    pub(crate) fn buy_execution() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_479_000 picoseconds.
        Weight::from_parts(1_551_000, 0)
    }
    /// Storage: `XcmPallet::Queries` (r:1 w:0)
    /// Proof: `XcmPallet::Queries` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn query_response() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `3465`
        // Minimum execution time: 5_718_000 picoseconds.
        Weight::from_parts(6_017_000, 3465)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    pub(crate) fn transact() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_566_000 picoseconds.
        Weight::from_parts(7_797_000, 0)
    }
    pub(crate) fn refund_surplus() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_957_000 picoseconds.
        Weight::from_parts(2_057_000, 0)
    }
    pub(crate) fn set_error_handler() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_426_000 picoseconds.
        Weight::from_parts(1_492_000, 0)
    }
    pub(crate) fn set_appendix() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_424_000 picoseconds.
        Weight::from_parts(1_472_000, 0)
    }
    pub(crate) fn clear_error() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_439_000 picoseconds.
        Weight::from_parts(1_510_000, 0)
    }
    pub(crate) fn descend_origin() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_534_000 picoseconds.
        Weight::from_parts(1_602_000, 0)
    }
    pub(crate) fn clear_origin() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_409_000 picoseconds.
        Weight::from_parts(1_495_000, 0)
    }
    /// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
    /// Proof: `Dmp::DeliveryFeeFactor` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `XcmPallet::SupportedVersion` (r:1 w:0)
    /// Proof: `XcmPallet::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Dmp::DownwardMessageQueues` (r:1 w:1)
    /// Proof: `Dmp::DownwardMessageQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `Dmp::DownwardMessageQueueHeads` (r:1 w:1)
    /// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn report_error() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `245`
        //  Estimated: `6196`
        // Minimum execution time: 68_605_000 picoseconds.
        Weight::from_parts(70_451_000, 6196)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// Storage: `XcmPallet::AssetTraps` (r:1 w:1)
    /// Proof: `XcmPallet::AssetTraps` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn claim_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `23`
        //  Estimated: `3488`
        // Minimum execution time: 9_431_000 picoseconds.
        Weight::from_parts(9_705_000, 3488)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    pub(crate) fn trap() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_382_000 picoseconds.
        Weight::from_parts(1_473_000, 0)
    }
    /// Storage: `XcmPallet::VersionNotifyTargets` (r:1 w:1)
    /// Proof: `XcmPallet::VersionNotifyTargets` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
    /// Proof: `Dmp::DeliveryFeeFactor` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `XcmPallet::SupportedVersion` (r:1 w:0)
    /// Proof: `XcmPallet::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Dmp::DownwardMessageQueues` (r:1 w:1)
    /// Proof: `Dmp::DownwardMessageQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Dmp::DownwardMessageQueueHeads` (r:1 w:1)
    /// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn subscribe_version() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42`
        //  Estimated: `3507`
        // Minimum execution time: 29_838_000 picoseconds.
        Weight::from_parts(30_550_000, 3507)
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `XcmPallet::VersionNotifyTargets` (r:0 w:1)
    /// Proof: `XcmPallet::VersionNotifyTargets` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn unsubscribe_version() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_047_000 picoseconds.
        Weight::from_parts(4_213_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    pub(crate) fn burn_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_778_000 picoseconds.
        Weight::from_parts(1_933_000, 0)
    }
    pub(crate) fn expect_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_546_000 picoseconds.
        Weight::from_parts(1_595_000, 0)
    }
    pub(crate) fn expect_origin() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_432_000 picoseconds.
        Weight::from_parts(1_497_000, 0)
    }
    pub(crate) fn expect_error() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_394_000 picoseconds.
        Weight::from_parts(1_449_000, 0)
    }
    pub(crate) fn expect_transact_status() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_649_000 picoseconds.
        Weight::from_parts(1_719_000, 0)
    }
    /// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
    /// Proof: `Dmp::DeliveryFeeFactor` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `XcmPallet::SupportedVersion` (r:1 w:0)
    /// Proof: `XcmPallet::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Dmp::DownwardMessageQueues` (r:1 w:1)
    /// Proof: `Dmp::DownwardMessageQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `Dmp::DownwardMessageQueueHeads` (r:1 w:1)
    /// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn query_pallet() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `245`
        //  Estimated: `6196`
        // Minimum execution time: 78_431_000 picoseconds.
        Weight::from_parts(80_862_000, 6196)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    pub(crate) fn expect_pallet() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_038_000 picoseconds.
        Weight::from_parts(8_239_000, 0)
    }
    /// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
    /// Proof: `Dmp::DeliveryFeeFactor` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `XcmPallet::SupportedVersion` (r:1 w:0)
    /// Proof: `XcmPallet::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Dmp::DownwardMessageQueues` (r:1 w:1)
    /// Proof: `Dmp::DownwardMessageQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `Dmp::DownwardMessageQueueHeads` (r:1 w:1)
    /// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn report_transact_status() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `245`
        //  Estimated: `6196`
        // Minimum execution time: 73_919_000 picoseconds.
        Weight::from_parts(76_038_000, 6196)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    pub(crate) fn clear_transact_status() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_475_000 picoseconds.
        Weight::from_parts(1_528_000, 0)
    }
    pub(crate) fn set_topic() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_379_000 picoseconds.
        Weight::from_parts(1_443_000, 0)
    }
    pub(crate) fn clear_topic() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_357_000 picoseconds.
        Weight::from_parts(1_435_000, 0)
    }
    pub(crate) fn set_fees_mode() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_393_000 picoseconds.
        Weight::from_parts(1_479_000, 0)
    }
    pub(crate) fn unpaid_execution() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_407_000 picoseconds.
        Weight::from_parts(1_471_000, 0)
    }
}
