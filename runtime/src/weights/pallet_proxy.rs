// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_proxy`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 36.0.0
//! DATE: 2024-09-30, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `LAPTOP-5V1NHBSA`, CPU: `11th Gen Intel(R) Core(TM) i7-11850H @ 2.50GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zkv-node
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet-proxy
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /home/danielecker/hl-crypto/zkVerify/HEADER-APACHE2
// --output
// /home/danielecker/hl-crypto/zkVerify/runtime/src/weights/pallet_proxy.rs
// --template
// /home/danielecker/hl-crypto/zkVerify/node/zkv-pallets-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

// TODO: Autogenerate with remote machine and add details + executed command

/// Weight functions for `pallet_proxy`.
pub struct ZKVWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_proxy::WeightInfo for ZKVWeight<T> {
    /// Storage: `Proxy::Proxies` (r:1 w:0)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn proxy(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `161 + p * (37 ±0)`
        //  Estimated: `4706`
        // Minimum execution time: 10_656_000 picoseconds.
        Weight::from_parts(13_242_610, 4706)
            // Standard Error: 11_301
            .saturating_add(Weight::from_parts(8_065, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:0)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// Storage: `Proxy::Announcements` (r:1 w:1)
    /// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2233), added: 4708, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn proxy_announced(a: u32, p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `451 + a * (68 ±0) + p * (37 ±0)`
        //  Estimated: `5698`
        // Minimum execution time: 26_642_000 picoseconds.
        Weight::from_parts(32_261_112, 5698)
            // Standard Error: 20_063
            .saturating_add(Weight::from_parts(89_497, 0).saturating_mul(a.into()))
            // Standard Error: 20_729
            .saturating_add(Weight::from_parts(35_130, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// Storage: `Proxy::Announcements` (r:1 w:1)
    /// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2233), added: 4708, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn remove_announcement(a: u32, _p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `366 + a * (68 ±0)`
        //  Estimated: `5698`
        // Minimum execution time: 17_851_000 picoseconds.
        Weight::from_parts(20_611_595, 5698)
            // Standard Error: 11_206
            .saturating_add(Weight::from_parts(156_965, 0).saturating_mul(a.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// Storage: `Proxy::Announcements` (r:1 w:1)
    /// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2233), added: 4708, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn reject_announcement(a: u32, p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `366 + a * (68 ±0)`
        //  Estimated: `5698`
        // Minimum execution time: 17_399_000 picoseconds.
        Weight::from_parts(18_504_712, 5698)
            // Standard Error: 9_673
            .saturating_add(Weight::from_parts(164_333, 0).saturating_mul(a.into()))
            // Standard Error: 9_994
            .saturating_add(Weight::from_parts(80_911, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:0)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// Storage: `Proxy::Announcements` (r:1 w:1)
    /// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2233), added: 4708, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn announce(a: u32, _p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `383 + a * (68 ±0) + p * (37 ±0)`
        //  Estimated: `5698`
        // Minimum execution time: 23_925_000 picoseconds.
        Weight::from_parts(30_493_374, 5698)
            // Standard Error: 17_870
            .saturating_add(Weight::from_parts(85_998, 0).saturating_mul(a.into()))
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn add_proxy(_p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `161 + p * (37 ±0)`
        //  Estimated: `4706`
        // Minimum execution time: 17_518_000 picoseconds.
        Weight::from_parts(21_824_825, 4706)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn remove_proxy(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `161 + p * (37 ±0)`
        //  Estimated: `4706`
        // Minimum execution time: 17_254_000 picoseconds.
        Weight::from_parts(20_331_880, 4706)
            // Standard Error: 18_933
            .saturating_add(Weight::from_parts(90_732, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn remove_proxies(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `161 + p * (37 ±0)`
        //  Estimated: `4706`
        // Minimum execution time: 16_595_000 picoseconds.
        Weight::from_parts(19_376_309, 4706)
            // Standard Error: 17_819
            .saturating_add(Weight::from_parts(92_427, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn create_pure(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `173`
        //  Estimated: `4706`
        // Minimum execution time: 18_120_000 picoseconds.
        Weight::from_parts(21_803_684, 4706)
            // Standard Error: 17_136
            .saturating_add(Weight::from_parts(53_961, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[0, 30]`.
    fn kill_pure(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `198 + p * (37 ±0)`
        //  Estimated: `4706`
        // Minimum execution time: 17_162_000 picoseconds.
        Weight::from_parts(21_299_963, 4706)
            // Standard Error: 21_058
            .saturating_add(Weight::from_parts(37_731, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
}
