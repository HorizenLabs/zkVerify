// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `crate::parachains::paras`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 36.0.0
//! DATE: 2024-09-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `drhorizen`, CPU: `11th Gen Intel(R) Core(TM) i7-11850H @ 2.50GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// /home/daniele/horizen/git/zkVerify/target/release/zkv-relay
// benchmark
// pallet
// --chain
// dev
// --pallet
// crate::parachains::paras
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /home/daniele/horizen/git/zkVerify/HEADER-APACHE2
// --output
// /home/daniele/horizen/git/zkVerify/runtime/src/weights/parachains/paras.rs
// --template
// /home/daniele/horizen/git/zkVerify/node/zkv-deploy-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `crate::parachains::paras` using the zkVerify node and recommended hardware.
pub struct ZKVWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> crate::parachains::paras::WeightInfo for ZKVWeight<T> {
    /// Storage: `Paras::CodeByHashRefs` (r:1 w:1)
    /// Proof: `Paras::CodeByHashRefs` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::CurrentCodeHash` (r:1 w:1)
    /// Proof: `Paras::CurrentCodeHash` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Digest` (r:1 w:1)
    /// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PastCodeMeta` (r:1 w:1)
    /// Proof: `Paras::PastCodeMeta` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PastCodePruning` (r:1 w:1)
    /// Proof: `Paras::PastCodePruning` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PastCodeHash` (r:0 w:1)
    /// Proof: `Paras::PastCodeHash` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::CodeByHash` (r:0 w:1)
    /// Proof: `Paras::CodeByHash` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `c` is `[1, 3145728]`.
    fn force_set_current_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `8308`
        //  Estimated: `11773`
        // Minimum execution time: 30_168_000 picoseconds.
        Weight::from_parts(30_533_000, 11773)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(1_656, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(7_u64))
    }
    /// Storage: `Paras::Heads` (r:0 w:1)
    /// Proof: `Paras::Heads` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `s` is `[1, 1048576]`.
    fn force_set_current_head(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_287_000 picoseconds.
        Weight::from_parts(18_905_794, 0)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(681, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Paras::MostRecentContext` (r:0 w:1)
    /// Proof: `Paras::MostRecentContext` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn force_set_most_recent_context() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_600_000 picoseconds.
        Weight::from_parts(3_751_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Paras::FutureCodeHash` (r:1 w:1)
    /// Proof: `Paras::FutureCodeHash` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::CurrentCodeHash` (r:1 w:0)
    /// Proof: `Paras::CurrentCodeHash` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::UpgradeCooldowns` (r:1 w:1)
    /// Proof: `Paras::UpgradeCooldowns` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteMap` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::CodeByHash` (r:1 w:1)
    /// Proof: `Paras::CodeByHash` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::ActiveValidatorKeys` (r:1 w:0)
    /// Proof: `ParasShared::ActiveValidatorKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteList` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::CodeByHashRefs` (r:1 w:1)
    /// Proof: `Paras::CodeByHashRefs` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::UpgradeRestrictionSignal` (r:0 w:1)
    /// Proof: `Paras::UpgradeRestrictionSignal` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `c` is `[1, 3145728]`.
    fn force_schedule_code_upgrade(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `8452`
        //  Estimated: `11917`
        // Minimum execution time: 7_566_000 picoseconds.
        Weight::from_parts(12_831_187, 11917)
            // Standard Error: 5
            .saturating_add(Weight::from_parts(1_696, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    /// Storage: `Paras::FutureCodeUpgrades` (r:1 w:0)
    /// Proof: `Paras::FutureCodeUpgrades` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::Heads` (r:0 w:1)
    /// Proof: `Paras::Heads` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::UpgradeGoAheadSignal` (r:0 w:1)
    /// Proof: `Paras::UpgradeGoAheadSignal` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::MostRecentContext` (r:0 w:1)
    /// Proof: `Paras::MostRecentContext` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `s` is `[1, 1048576]`.
    fn force_note_new_head(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `94`
        //  Estimated: `3559`
        // Minimum execution time: 12_486_000 picoseconds.
        Weight::from_parts(19_288_865, 3559)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(679, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::ActionsQueue` (r:1 w:1)
    /// Proof: `Paras::ActionsQueue` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn force_queue_action() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4312`
        //  Estimated: `7777`
        // Minimum execution time: 16_226_000 picoseconds.
        Weight::from_parts(16_895_000, 7777)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Paras::PvfActiveVoteMap` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteList` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::ActionsQueue` (r:1 w:1)
    /// Proof: `Paras::ActionsQueue` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `c` is `[1, 3145728]`.
    fn add_trusted_validation_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `683`
        //  Estimated: `4148`
        // Minimum execution time: 67_825_000 picoseconds.
        Weight::from_parts(88_203_425, 4148)
            // Standard Error: 4
            .saturating_add(Weight::from_parts(1_261, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `Paras::CodeByHashRefs` (r:1 w:0)
    /// Proof: `Paras::CodeByHashRefs` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::CodeByHash` (r:0 w:1)
    /// Proof: `Paras::CodeByHash` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn poke_unused_validation_code() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `27`
        //  Estimated: `3492`
        // Minimum execution time: 5_947_000 picoseconds.
        Weight::from_parts(6_106_000, 3492)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `ParasShared::ActiveValidatorKeys` (r:1 w:0)
    /// Proof: `ParasShared::ActiveValidatorKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteMap` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn include_pvf_check_statement() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `26706`
        //  Estimated: `30171`
        // Minimum execution time: 80_706_000 picoseconds.
        Weight::from_parts(92_175_000, 30171)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `ParasShared::ActiveValidatorKeys` (r:1 w:0)
    /// Proof: `ParasShared::ActiveValidatorKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteMap` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteList` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::UpcomingUpgrades` (r:1 w:1)
    /// Proof: `Paras::UpcomingUpgrades` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `System::Digest` (r:1 w:1)
    /// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::FutureCodeUpgrades` (r:0 w:100)
    /// Proof: `Paras::FutureCodeUpgrades` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn include_pvf_check_statement_finalize_upgrade_accept() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `27360`
        //  Estimated: `30825`
        // Minimum execution time: 660_648_000 picoseconds.
        Weight::from_parts(684_291_000, 30825)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(104_u64))
    }
    /// Storage: `ParasShared::ActiveValidatorKeys` (r:1 w:0)
    /// Proof: `ParasShared::ActiveValidatorKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteMap` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn include_pvf_check_statement_finalize_upgrade_reject() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `27338`
        //  Estimated: `30803`
        // Minimum execution time: 81_886_000 picoseconds.
        Weight::from_parts(85_868_000, 30803)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `ParasShared::ActiveValidatorKeys` (r:1 w:0)
    /// Proof: `ParasShared::ActiveValidatorKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteMap` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteList` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::ActionsQueue` (r:1 w:1)
    /// Proof: `Paras::ActionsQueue` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn include_pvf_check_statement_finalize_onboarding_accept() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `26728`
        //  Estimated: `30193`
        // Minimum execution time: 539_484_000 picoseconds.
        Weight::from_parts(549_112_000, 30193)
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `ParasShared::ActiveValidatorKeys` (r:1 w:0)
    /// Proof: `ParasShared::ActiveValidatorKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteMap` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn include_pvf_check_statement_finalize_onboarding_reject() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `26706`
        //  Estimated: `30171`
        // Minimum execution time: 78_975_000 picoseconds.
        Weight::from_parts(85_445_000, 30171)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}
