name: Build, Test and Publish Docker Image

on:
  workflow_call:
    inputs:
      chain:
        description: "Solo or relay"
        required: true
        type: string
      git_ref:
        type: string
        required: true
    secrets:
      DOCKER_HUB_USERNAME:
        required: true
      DOCKER_HUB_TOKEN:
        required: true
      GH_TOKEN:
        required: true
      QA_SLACK_WEBHOOK_URL:
        required: true

env:
  DOCKER_HUB_ORG: horizenlabs
  DOCKER_IMAGE_BUILD_NAME: zkverify

jobs:
  build:
    runs-on:
      group: zkVerify
    name: Build Docker image
    outputs:
      artifact_name: ${{ steps.create-tar-file.outputs.artifact_name }}
  
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
          fetch-depth: 0

      - name: Build docker image
        run: |
          if [[ "${{ inputs.chain }}" == "solo" ]]; then
            docker build --build-arg PROFILE=production -f "docker/dockerfiles/zkv-node.Dockerfile" -t "${DOCKER_HUB_ORG}/zkverify-solo" .
            echo "DOCKER_IMAGE_NAME=${DOCKER_HUB_ORG}/zkverify-solo" >> $GITHUB_ENV
          elif [[ "${{ inputs.chain }}" == "relay" ]]; then
            docker build --build-arg PROFILE=production -f "docker/dockerfiles/zkv-relay.Dockerfile" -t "${DOCKER_HUB_ORG}/zkverify-relay" .
            echo "DOCKER_IMAGE_NAME=${DOCKER_HUB_ORG}/zkverify-relay" >> $GITHUB_ENV
          fi
        timeout-minutes: 30
      
      - name: Save the Docker image as a tarball
        id: create-tar-file
        run: |       
          ARTIFACT_NAME="zkverify-${{ inputs.chain }}"
          TAR_FILE="${{github.workspace}}/${ARTIFACT_NAME}.tar"

          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "TAR_FILE=$TAR_FILE" >> $GITHUB_ENV

          docker save "${DOCKER_IMAGE_NAME}" -o "${TAR_FILE}"

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.create-tar-file.outputs.artifact_name }}
          path: ${{ env.TAR_FILE }}
          if-no-files-found: error
          retention-days: 1
          compression-level: 0
          overwrite: true
  
  execute-e2e-tests:
    runs-on: ubuntu-latest
    needs: build
    name: Execute E2E Tests
    outputs:
      test_status: ${{ steps.run-test.outputs.test_status }} 
    steps:
      - name: E2E
        run: echo "execute-e2e-tests with ${{ needs.build.outputs.artifact_name }}"  

      - uses: actions/checkout@v4
        with:
          repository: HorizenLabs/zkVerify-qa
          ref: main
          clean: true
          fetch-depth: 1

      - name: Download zkVerify Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact_name }}
          path: ./

      - name: Load Docker image and rename
        run: |
          IMAGE_NAME="$(docker load -i "${GITHUB_WORKSPACE}/${{ needs.build.outputs.artifact_name }}.tar" | awk '/Loaded image:/ { print $3 }')"
          echo $(docker images -q "${IMAGE_NAME}" > /dev/null 2>&1 && echo "Image exists..." || echo "Image missing...")
          echo "Loaded image ${IMAGE_NAME}"
          TEST_TAG="test"
          echo "TEST_TAG=${TEST_TAG}" >> $GITHUB_ENV
          docker image tag "${IMAGE_NAME}" "${DOCKER_HUB_ORG}/${DOCKER_IMAGE_BUILD_NAME}:${TEST_TAG}"
        shell: bash

      - name: Run test
        id: run-test
        uses: 'HorizenLabs/zkVerify-qa/.github/actions/e2e-test@main'
        with:
          zkverify_docker_tag: ${{ env.TEST_TAG }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_TOKEN: ${{ secrets. DOCKER_HUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          QA_SLACK_WEBHOOK_URL: ${{ secrets.QA_SLACK_WEBHOOK_URL }}

  publish-docker-image:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: build
    # needs: [ build, execute-e2e-tests ] # Wait for e2e tests to finish
    # if: ${{ needs.execute-e2e-tests.outputs.test_status == 'success' }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_ref }}
          fetch-depth: 0

      - name: Download zkVerify Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact_name }}
          path: ./

      - name: Publish Docker image
        env:
          RELEASE_BRANCH: release
          MAINTAINERS_KEYS: ${{ vars.MAINTAINERS_KEYS }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
        run: |
          source "${GITHUB_WORKSPACE}/ci/setup_env.sh"
          "${GITHUB_WORKSPACE}/ci/docker.sh" --image-artifact ${{ needs.build.outputs.artifact_name }}
        shell: bash

      - name: Upload runtime artifact
        uses: actions/upload-artifact@v4
        with:
          name: "zkv_runtime.${{ inputs.chain }}.compact.compressed.wasm"
          path: ./zkv_runtime.compact.compressed.wasm