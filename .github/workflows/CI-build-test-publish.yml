name: Build, Test and Publish Docker Image

on:
  workflow_call:
    inputs:
      chain:
        description: "Solo or relay"
        required: true
        type: string
      git_tag:
        type: string
    secrets:
      DOCKER_HUB_USERNAME:
        required: true
      DOCKER_HUB_TOKEN:
        required: true

jobs:
  build:
    runs-on:
      group: zkVerify
    name: Build Docker image
    outputs:
      artifact_name: ${{ steps.create-tar-file.outputs.artifact_name }}
  
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.git_tag || github.ref }}
          fetch-depth: 0

      - name: Set up deps cache
        run: mkdir deps

      - name: Restore common cache
        if: ${{ !env.ACT }}
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            deps/
          key: common-cache
      
      - name: Restore build cache
        if: ${{ !env.ACT }}
        uses: actions/cache/restore@v3
        with:
          path: |
            target/
          key: build-cache
      
      - name: Verify restored build cache
        run: |
          ls target
          ls target/release
      
      - name: Build docker image
        run: |
          if [[ "${{ inputs.chain }}" == "solo" ]]; then
            docker build --build-arg PROFILE=production -f "docker/dockerfiles/zkv-node.Dockerfile" -t "horizenlabs/zkverify-solo" .
            echo "DOCKER_IMAGE_NAME=horizenlabs/zkverify-solo" >> $GITHUB_ENV
          elif [[ "${{ inputs.chain }}" == "relay" ]]; then
            docker build --build-arg PROFILE=production -f "docker/dockerfiles/zkv-relay.Dockerfile" -t "horizenlabs/zkverify-relay" .
            echo "DOCKER_IMAGE_NAME=horizenlabs/zkverify-relay" >> $GITHUB_ENV
          fi
      
      - name: Save the Docker image as a tarball
        id: create-tar-file
        run: |       
          ARTIFACT_NAME="zkverify-${{ inputs.chain }}"
          TAR_FILE="${{github.workspace}}/${ARTIFACT_NAME}.tar"

          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "TAR_FILE=$TAR_FILE" >> $GITHUB_ENV

          docker save "${DOCKER_IMAGE_NAME}" -o "${TAR_FILE}"

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.create-tar-file.outputs.artifact_name }}
          path: ${TAR_FILE}
          if-no-files-found: error
          retention-days: 1
          compression-level: 0
          overwrite: true
  
  execute-e2e-tests:
    runs-on: ubuntu-latest
    needs: build
    name: Execute E2E Tests
    outputs:
      test_status: ${{ steps.run-test.outputs.test_status }} 
    steps:
      - name: E2E
        run: echo "execute-e2e-tests with ${{ needs.build.outputs.artifact_name }}"  

      - name: Download zkVerify Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.buid.outputs.artifact_name }}
          path: ./

      - name: Load Docker image
        run: |
          image_name="$(docker load -i "${GITHUB_WORKSPACE}/${{ needs.build.outputs.artifact_name }}.tar" | awk '/Loaded image:/ { print $3 }')"
          echo "=== Loaded image ${image_name} ==="
        shell: bash

      - name: Run test
        id: run-test
        uses: 'HorizenLabs/zkVerify-qa/.github/actions/e2e-test@main'
        with:
          artifact_name: ${{ needs.build.outputs.artifact_name }}
          zkverify_docker_tag: latest
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

  publish-docker-image:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: build
    # needs: [ build, execute-e2e-tests ] # Wait for e2e tests to finish
    # if: ${{ needs.execute-e2e-tests.outputs.test_status == 'success' }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_tag || github.ref }}
          fetch-depth: 0

      - name: Download zkVerify Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact_name }}
          path: ./

      - name: Publish Docker image
        env:
          RELEASE_BRANCH: release
          MAINTAINERS_KEYS: ${{ vars.MAINTAINERS_KEYS }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
        run: |
          source "${GITHUB_WORKSPACE}/ci/setup_env.sh"
          "${GITHUB_WORKSPACE}/ci/docker.sh" --image-artifact ${{ needs.build.outputs.artifact_name }}
        shell: bash

      - name: Upload runtime artifact
        uses: actions/upload-artifact@v4
        with:
          name: zkv_runtime.compact.compressed.wasm
          path: ./zkv_runtime.compact.compressed.wasm