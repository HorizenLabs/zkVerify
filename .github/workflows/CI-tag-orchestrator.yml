name: Tag-orchestrator

on:
  push:
    branches:
      - "yuriko/WEB3-1184"
    tags:
      - "[0-9]+.[0-9]+.[0-9]+-[0-9]+.[0-9]+.[0-9]+*"
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1

jobs:
  env-setup:
    uses: ./.github/workflows/CI-build.yml
    with:
      CACHING_MODE: "CACHE_RESTORE"
  
  build:
    runs-on: ubuntu-latest
    needs: env-setup

    outputs:
      artifact_name_solo: ${{ steps.save-image-names.docker_image_solo }}
      artifact_name_relay: ${{ steps.save-image-names.docker_image_relay }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up deps cache
        run: mkdir deps

      - name: Restore common cache
        if: ${{ !env.ACT }}
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            deps/
          key: common-cache
      
      - name: Restore build cache
        if: ${{ !env.ACT }}
        uses: actions/cache/restore@v3
        with:
          path: |
            target/
          key: build-cache
      
      - name: Verify release build
        run: |
          ls target
          ls target/release

      - name: Build solo and relay chain configured images
        id: build_images
        run: |
          SKIP_IMAGE_VALIDATION=true
          "${GITHUB_WORKSPACE}/docker/scripts/bootstrap.sh" --skip-parachain --skip-compile
        shell: bash

      - name: Set Docker image names as output
        id: save-image-names
        run: |
          echo "docker_image_solo=horizenlabs/zkverify:latest" >> $GITHUB_OUTPUT
          echo "docker_image_relay=horizenlabs/zkv-relay:latest" >> $GITHUB_OUTPUT

      - name: Save the Docker image as a tarball
        id: create-tar-file
        run: |           
          TAR_FILE_NAME_SOLO="zkverify-solo"
          TAR_FILE_SOLO="${{github.workspace}}/${TAR_FILE_NAME_SOLO}.tar"

          TAR_FILE_NAME_RELAY="zkverify-relay"
          TAR_FILE_RELAY="${{github.workspace}}/${TAR_FILE_NAME_RELAY}.tar"

          echo "tar_file_name_solo=$TAR_FILE_NAME_SOLO" >> $GITHUB_OUTPUT
          echo "tar_file_solo=$TAR_FILE_SOLO" >> $GITHUB_OUTPUT

          echo "tar_file_name_relay=$TAR_FILE_NAME_RELAY" >> $GITHUB_OUTPUT
          echo "tar_file_relay=$TAR_FILE_RELAY" >> $GITHUB_OUTPUT

          docker save "${{ steps.save-image-names.outputs.docker_image_solo }}" -o "${TAR_FILE_SOLO}"
          docker save "${{ steps.save-image-names.outputs.docker_image_relay }}" -o "${TAR_FILE_RELAY}"
        
      - name: Upload Docker Image Artifact (solo chain)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.create-tar-file.outputs.tar_file_name_solo }}
          path: ${{ steps.create-tar-file.outputs.tar_file_solo }}
          if-no-files-found: error
          retention-days: 1
          compression-level: 0
          overwrite: true

      - name: Upload Docker Image Artifact (relay chain)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.create_tar_file.outputs.tar_file_name_relay }}
          path: ${{ steps.create_tar_file.outputs.tar_file_relay }}
          if-no-files-found: error
          retention-days: 1
          compression-level: 0
          overwrite: true

  test-publish:
    needs: build
    strategy:
      matrix: 
        artifact_name: 
        - ${{ needs.build.outputs.artifact_name_solo }}
        - ${{ needs.build.outputs.artifact_name_relay }}
    
    uses: ./.github/workflows/CI-test-publish.yml
    with:
      artifact_name: ${{ matrix.artifact_name }}

  # rustdoc-job:
  #   uses: ./.github/workflows/CI-rustdoc.yml
  #   with:
  #     CACHING_MODE: "CACHE_RESTORE"

  # notify-slack:
  #   runs-on: ubuntu-latest
  #   needs: [build-and-publish, rustdoc-job]
  #   if: ${{ always() }}
  #   steps:
  #     - name: Check previous job status
  #       id: job_status
  #       run: |
  #         if [ "${{ needs.build-and-publish.result }}" == "failure" ] || [ "${{ needs.rustdoc-job.result }}" == "failure" ]; then
  #           echo "JOB_STATUS=failed" >> $GITHUB_ENV
  #         else
  #           echo "JOB_STATUS=success" >> $GITHUB_ENV
  #         fi

  #     - name: Notify Slack
  #       if: ${{ env.JOB_STATUS == 'failed' && !env.ACT }}
  #       uses: slackapi/slack-github-action@v1.25.0
  #       with:
  #         payload: |
  #           {
  #             "blocks": [
  #               {
  #                 "type": "header",
  #                 "text": {
  #                   "type": "plain_text",
  #                   "text": "ðŸš¨ ALERT - ZkVerify CI/CD Tag Orchestrator Job Failed! ðŸš¨"
  #                 }
  #               },
  #               {
  #                 "type": "section",
  #                 "fields": [
  #                   {
  #                     "type": "mrkdwn",
  #                     "text": "*Job URL:* <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Job>"
  #                   },
  #                   {
  #                     "type": "mrkdwn",
  #                     "text": "*Pull Request:* <${{ github.event.pull_request.html_url || github.event.head_commit.url }}|View PR/Commit>"
  #                   }
  #                 ]
  #               }
  #             ]
  #           }
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #         SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
