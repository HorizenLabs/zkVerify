name: CI-tag-orchestrator

on:
  push:
    tags:
      - '[0-9].[0-9].[0-9]*'
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1

jobs:
  docker-job:
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Build/Publish Docker image
        env:
          RELEASE_BRANCH: release
          MAINTAINERS_KEYS: ${{ vars.MAINTAINERS_KEYS }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
        run: |
          source "${GITHUB_WORKSPACE}/ci/setup_env.sh"
          "${GITHUB_WORKSPACE}/ci/docker.sh"
  rustdoc-job:
    needs: docker-job
    uses: ./.github/workflows/CI-rustdoc.yml

  notify-slack:
    runs-on: ubuntu-latest
    needs: [ docker-job, rustdoc-job ]
    if: ${{ always() }}
    steps:
      - name: Check previous job status
        id: job_status
        run: |
          if [ "${{ needs.docker-job.result }}" == "failure" ] || [ "${{ needs.rustdoc-job.result }}" == "failure" ]; then
            echo "JOB_STATUS=failed" >> $GITHUB_ENV
          else
            echo "JOB_STATUS=success" >> $GITHUB_ENV

      - name: Notify Slack
        if: env.JOB_STATUS == 'failed'
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "ALERT - ZkVerify CI/CD Tag Orchestrator"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":alert: *ZkVerify Tag Orchestrator job: ${{ github.run_id }} has failed*\nPull Request: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.YURI_SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK