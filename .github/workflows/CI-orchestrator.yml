name: Orchestrator

on:
  pull_request:
    types: [opened]
  workflow_dispatch:

jobs:
  build-job:
    uses: ./.github/workflows/CI-build.yml
    with:
      CACHING_MODE: "CACHE_RESTORE"

  test-job:
    uses: ./.github/workflows/CI-test.yml
    with:
      CACHING_MODE: "CACHE_RESTORE"
      
  lint-format-job:
    uses: ./.github/workflows/CI-lint-format.yml
    with:
      CACHING_MODE: "CACHE_RESTORE"

  e2e-test-job:
    uses: ./.github/workflows/CI-e2e-test.yml
    with:
      CACHING_MODE: "CACHE_RESTORE"

  check-act:
    runs-on: ubuntu-latest
    outputs:
      act: ${{ steps.check.outputs.act }}
    steps:
      - name: Check if ACT exists
        id: check
        run: |
          if [ -n "${{ env.ACT }}" ]; then
            echo "act=true" >> $GITHUB_OUTPUT
          else
            echo "act=false" >> $GITHUB_OUTPUT
          fi

  set-overall-result:
    runs-on: ubuntu-latest
    needs: [build-job, test-job, lint-format-job, e2e-test-job, check-act]
    if: ${{ always() && needs.check-act.outputs.act == 'false' }}
    outputs:
      branch-name: ${{ steps.get-info.outputs.BRANCH_NAME }}
      last-commit-sha: ${{ steps.get-info.outputs.LAST_COMMIT_SHA }}
      pr-url: ${{ steps.get-info.outputs.PR_URL }}
      overall-status: ${{ steps.set-status.outputs.OVERALL_STATUS }}
    steps:
      - name: Get target PR info
        id: get-info
        run: |
          BRANCH_NAME=${{ github.head_ref || github.ref_name }}
          echo BRANCH_NAME is ${BRANCH_NAME}
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          ALL_PRS=$(curl -s --fail \
                    -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    "https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls?state=open")         
          LAST_COMMIT_SHA=$(echo ${ALL_PRS} | jq ".[] | select(.head.label == \"${GITHUB_REPOSITORY_OWNER}:${BRANCH_NAME}\")" | jq -r ".head.sha")
          echo LAST_COMMIT_SHA is ${LAST_COMMIT_SHA}
          echo "LAST_COMMIT_SHA=${LAST_COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "LAST_COMMIT_SHA=${LAST_COMMIT_SHA}" >> $GITHUB_ENV
          PR_URL=$(echo ${ALL_PRS} | jq ".[] | select(.head.label == \"${GITHUB_REPOSITORY_OWNER}:${BRANCH_NAME}\")" | jq -r ".html_url")
          echo PR_URL is ${PR_URL}
          echo "PR_URL=${PR_URL}" >> $GITHUB_OUTPUT
      - name: Set overall result
        id: set-status
        run: |
          if [ "${{ github.event.workflow_run.conclusion }}" == "cancelled" ]; then
            OVERALL_STATUS="cancelled"
          else
            OVERALL_STATUS="success"
            if [ "${{ needs.build-job.result }}" != "success" ] || 
                [ "${{ needs.test-job.result }}" != "success" ] ||
                [ "${{ needs.lint-format-job.result }}" != "success" ] || 
                [ "${{ needs.e2e-test-job.result }}" != "success" ]; then
              OVERALL_STATUS="failure"
            fi
  
            if [ ${LAST_COMMIT_SHA} != "" ]; then
              echo Setting overall result
              curl -L --fail \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${GITHUB_REPOSITORY}/statuses/${LAST_COMMIT_SHA}" \
              -d '{"state":"'${OVERALL_STATUS}'","context":"Orchestrator"}'
            else
              echo Unable to set overall result
            fi
          fi
  
          echo "OVERALL_STATUS=$OVERALL_STATUS" >> $GITHUB_OUTPUT
          
  notify-slack:
    runs-on: ubuntu-latest
    needs: [build-job, test-job, lint-format-job, e2e-test-job, check-act, set-overall-result]
    if: ${{ always() && needs.check-act.outputs.act == 'false' && needs.set-overall-result.outputs.overall-status != 'cancelled' }}
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
      - name: Report Job Statuses
        run: |
          echo "Build Job Status: ${{ needs.build-job.result }}"
          echo "Test Job Status: ${{ needs.test-job.result }}"
          echo "Lint and Format Job Status: ${{ needs.lint-format-job.result }}"
          echo "E2E Test Job Status: ${{ needs.e2e-test-job.result }}"
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
      - name: Display structure of downloaded files
        run: ls -R
      - name: Summarize Test Data
        run: ./.github/scripts/summarize_tests.sh
      - name: Display unit test output
        run: |
          if [ -f "./test-output/unit_tests_output.txt" ]; then
            cat "./test-output/unit_tests_output.txt"
          else
            echo "Unit test output not found."
          fi
      - name: Display integration test output
        run: |
          if [ -f "./test-output/integration_tests_output.txt" ]; then
            cat "./test-output/integration_tests_output.txt"
          else
            echo "Integration test output not found."
          fi
      - name: Display linting output
        run: |
          if [ -f "./lint-and-format-output/linting_output.txt" ]; then
            cat "./lint-and-format-output/linting_output.txt"
          else
            echo "Linting output not found."
          fi
      - name: Display formatting output
        run: |
          if [ -f "./lint-and-format-output/formatting_output.txt" ]; then
            cat "./lint-and-format-output/formatting_output.txt"
          else
            echo "Formatting output not found."
          fi
      - name: Display e2e test output
        run: |
          if [ -f "./e2e-test-output/e2e_test_output.txt" ]; then
            cat "./e2e-test-output/e2e_test_output.txt"
          else
            echo "E2e test output not found."
          fi
      - name: Prepare Slack Notification Data
        run: |
          if [ "${{ needs.set-overall-result.outputs.pr-url }}" != "" ]; then
            echo "PR_LINK=<${{ needs.set-overall-result.outputs.pr-url }}|Pull Request>" >> $GITHUB_ENV
          else
            echo "PR_LINK=N/A" >> $GITHUB_ENV
          fi
      
          if [ "${{ needs.set-overall-result.outputs.branch-name }}" != "" ]; then
            echo "BRANCH_LINK=<https://github.com/${{ github.event.repository.full_name }}/tree/${{ needs.set-overall-result.outputs.branch-name }}|Branch>" >> $GITHUB_ENV
          else
            echo "BRANCH_LINK=N/A" >> $GITHUB_ENV
          fi
      
          if [ "${{ needs.set-overall-result.outputs.last-commit-sha }}" != "" ]; then
            echo "COMMIT_LINK=<https://github.com/${{ github.event.repository.full_name }}/commit/${{ needs.set-overall-result.outputs.last-commit-sha }}|Commit>" >> $GITHUB_ENV
          else
            echo "COMMIT_LINK=N/A" >> $GITHUB_ENV
          fi
      
          if [ "${{ needs.set-overall-result.outputs.overall-status }}" = "success" ]; then
            echo "OVERALL_STATUS_EMOJI=:large_green_circle:" >> $GITHUB_ENV
          else
            echo "OVERALL_STATUS_EMOJI=:alert:" >> $GITHUB_ENV
          fi
      
          if [[ "${{ needs.build-job.result }}" == "success" ]]; then
            echo "BUILD_JOB_EMOJI=:large_green_circle:" >> $GITHUB_ENV
          else
            echo "BUILD_JOB_EMOJI=:red_circle:" >> $GITHUB_ENV
          fi

          if [[ "${{ needs.test-job.result }}" == "success" ]]; then
            echo "TEST_JOB_EMOJI=:large_green_circle:" >> $GITHUB_ENV
          else
            echo "TEST_JOB_EMOJI=:red_circle:" >> $GITHUB_ENV
          fi
      
          if [[ "${{ needs.lint-format-job.result }}" == "success" ]]; then
            echo "LINT_FORMAT_JOB_EMOJI=:large_green_circle:" >> $GITHUB_ENV
          else
            echo "LINT_FORMAT_JOB_EMOJI=:red_circle:" >> $GITHUB_ENV
          fi
      
          if [[ "${{ needs.e2e-test-job.result }}" == "success" ]]; then
            echo "E2E_TEST_JOB_EMOJI=:large_green_circle:" >> $GITHUB_ENV
          else
            echo "E2E_TEST_JOB_EMOJI=:red_circle:" >> $GITHUB_ENV
          fi
      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ env.OVERALL_STATUS_EMOJI }} *ZKVERIFY BUILD STATUS:* ${{ needs.set-overall-result.outputs.overall-status }} ${{ env.OVERALL_STATUS_EMOJI }}\n\n${{ env.PR_LINK }} - ${{ env.BRANCH_LINK }} - ${{ env.COMMIT_LINK }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ env.BUILD_JOB_EMOJI }} *Build:* ${{ needs.build-job.result }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ env.TEST_JOB_EMOJI }} *Test:* ${{ needs.test-job.result }}\n\n${{ env.UNIT_TEST_SUMMARY }}\n${{ env.INTEGRATION_TEST_SUMMARY }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ env.LINT_FORMAT_JOB_EMOJI }} *Lint & Format:* ${{ needs.lint-format-job.result }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ env.E2E_TEST_JOB_EMOJI }} *Zombienet Tests:* ${{ needs.e2e-test-job.result }}\n\n${{ env.E2E_TEST_SUMMARY }}"
                  }
                }
              ]
            }
              
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
